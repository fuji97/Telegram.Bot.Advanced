// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Telegram.Bot.Advanced.Models;
using Telegram.Bot.Advanced.Test;
using Telegram.Bot.Types.Enums;

namespace Telegram.Bot.Advanced.Test.Migrations
{
    [DbContext(typeof(MasterContext))]
    partial class MasterContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Telegram.Bot.Advanced.Models.Data", b =>
                {
                    b.Property<long>("UserId");

                    b.Property<string>("Key");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "Key");

                    b.HasAlternateKey("Key", "UserId");

                    b.ToTable("Data");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.Models.TelegramChat", b =>
                {
                    b.Property<long>("Id");

                    b.Property<bool>("AllMembersAreAdministrators");

                    b.Property<bool?>("CanSetStickerSet");

                    b.Property<string>("Description");

                    b.Property<string>("FirstName");

                    b.Property<string>("InviteLink");

                    b.Property<string>("LastName");

                    b.Property<int>("Role");

                    b.Property<int>("State");

                    b.Property<string>("StickerSetName");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<string>("Username");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.Test.Master", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FriendCode");

                    b.Property<string>("Name");

                    b.Property<string>("ServantList");

                    b.Property<int>("Server");

                    b.Property<int>("Status");

                    b.Property<string>("SupportList");

                    b.Property<long>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Masters");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.Test.RegisteredChat", b =>
                {
                    b.Property<long>("ChatId");

                    b.Property<int>("MasterId");

                    b.HasKey("ChatId", "MasterId");

                    b.HasIndex("MasterId");

                    b.ToTable("RegisteredChats");
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.Models.Data", b =>
                {
                    b.HasOne("Telegram.Bot.Advanced.Models.TelegramChat", "User")
                        .WithMany("Data")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.Test.Master", b =>
                {
                    b.HasOne("Telegram.Bot.Advanced.Models.TelegramChat", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Telegram.Bot.Advanced.Test.RegisteredChat", b =>
                {
                    b.HasOne("Telegram.Bot.Advanced.Models.TelegramChat", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Telegram.Bot.Advanced.Test.Master", "Master")
                        .WithMany("RegisteredChats")
                        .HasForeignKey("MasterId")
                        .OnDelete(DeleteBehavior.SetNull);
                });
#pragma warning restore 612, 618
        }
    }
}
